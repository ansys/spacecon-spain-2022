
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/00-python.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_00-python.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_00-python.py:


.. _ref_python_tutorial:

=====================
Short Python Tutorial
=====================


In this tutorial, we will introduce very briefly what is Python
and how to use it.

.. GENERATED FROM PYTHON SOURCE LINES 15-17

But first...


.. GENERATED FROM PYTHON SOURCE LINES 20-25

What is PyMAPDL?
~~~~~~~~~~~~~~~~

PyMAPDL is the pythonic interface for Ansys MAPDL product.


.. GENERATED FROM PYTHON SOURCE LINES 29-34

**What does this mean?**

It means that you can call Ansys products (Solvers, Post processing tools, etc)
using Python programming language.


.. GENERATED FROM PYTHON SOURCE LINES 36-40

What is python?
~~~~~~~~~~~~~~~

Python is #TODO: TO FILL

.. GENERATED FROM PYTHON SOURCE LINES 42-47

Introduction to Python
~~~~~~~~~~~~~~~~~~~~~~

Storing variables.


.. GENERATED FROM PYTHON SOURCE LINES 47-56

.. code-block:: default


    mystring = "text"
    myotherstring = "text"
    myfloat = 2.2
    myint = 2
    mybool = (
        True  # True and False are reserved keywords. As well as for, in, as and some more.
    )








.. GENERATED FROM PYTHON SOURCE LINES 57-58

There are functions such as ``print`` or ``help`` which can be called as:

.. GENERATED FROM PYTHON SOURCE LINES 58-63

.. code-block:: default


    print("Hello Madrid!")  # You can call functions using parenthesis

    help(print)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Hello Madrid!
    Help on built-in function print in module builtins:

    print(...)
        print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)
    
        Prints the values to a stream, or to sys.stdout by default.
        Optional keyword arguments:
        file:  a file-like object (stream); defaults to the current sys.stdout.
        sep:   string inserted between values, default a space.
        end:   string appended after the last value, default a newline.
        flush: whether to forcibly flush the stream.





.. GENERATED FROM PYTHON SOURCE LINES 64-65

There are other more complex structures such as list, tuples, dicts, etc

.. GENERATED FROM PYTHON SOURCE LINES 65-72

.. code-block:: default


    mylist = [1, 2.2, "asdf"]
    print(mylist[0])  # Python is zero based indexing!

    mytuple = (1, 2.5, "qwer")
    print(mytuple[2])  # Indexing in python is done using square brackets `[]`





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    1
    qwer




.. GENERATED FROM PYTHON SOURCE LINES 73-75

This is a dict which does a mapping between its
keys and values.

.. GENERATED FROM PYTHON SOURCE LINES 75-82

.. code-block:: default

    mydict = {"a": 1, "b": 2, "c": 3}
    # keys are the leters, but it could be anything
    # values are the numbers, but it could be anything!

    print(mydict["c"])






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    3




.. GENERATED FROM PYTHON SOURCE LINES 83-87

Control flow in Python
~~~~~~~~~~~~~~~~~~~~~~

You can do conditionals (``if``) as the following:

.. GENERATED FROM PYTHON SOURCE LINES 87-102

.. code-block:: default

    my_int = 2

    if myint > 5:
        print("My int is bigger than 5!")
    elif myint > 2:
        print("My int is bigger than 2!")
    else:
        print("Any other case")

    if mybool:
        print("Because 'mybool' is True, I'm showing you this.")

    if mystring == myotherstring:  # "text" == 'text'
        print("Although we used different quotes, they are the same!")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Any other case
    Because 'mybool' is True, I'm showing you this.
    Although we used different quotes, they are the same!




.. GENERATED FROM PYTHON SOURCE LINES 103-108

Loops in python
~~~~~~~~~~~~~~~

Loops in Python can be done as:


.. GENERATED FROM PYTHON SOURCE LINES 108-111

.. code-block:: default

    for i in [1, 2, 3]:
        print(i)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    1
    2
    3




.. GENERATED FROM PYTHON SOURCE LINES 112-113

or

.. GENERATED FROM PYTHON SOURCE LINES 113-116

.. code-block:: default

    for i in range(0, 5):
        print(i)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    0
    1
    2
    3
    4




.. GENERATED FROM PYTHON SOURCE LINES 117-118

there is also 'while' loops

.. GENERATED FROM PYTHON SOURCE LINES 118-123

.. code-block:: default

    i = 0
    while i < 5:
        print(i)
        i = i + 1





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    0
    1
    2
    3
    4




.. GENERATED FROM PYTHON SOURCE LINES 124-125

You can "break" loops using the keyword ``break``

.. GENERATED FROM PYTHON SOURCE LINES 125-137

.. code-block:: default


    i = 0
    j = 0
    while i < 10:
        print(i, j)
        i += 1  # Convenient way to express: i = i + 1
        j += 2

        if j > 5:  # early exit
            print("Exiting early!")
            break





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    0 0
    1 2
    2 4
    Exiting early!




.. GENERATED FROM PYTHON SOURCE LINES 138-143

Importing other libraries
~~~~~~~~~~~~~~~~~~~~~~~~~

You can also import other libraries that expand Python functionalities by
providing more data structures, functions and/or classes.

.. GENERATED FROM PYTHON SOURCE LINES 143-148

.. code-block:: default


    import os  # for Operative system operations related

    print(os.name)  # OS name: nt or linux





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    posix




.. GENERATED FROM PYTHON SOURCE LINES 149-150

You can also import modules/functions from libraries

.. GENERATED FROM PYTHON SOURCE LINES 150-154

.. code-block:: default

    from os.path import exists

    exists("myfile.txt")  # Check if file 'myfile.txt' exists or not. Should show False





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    False



.. GENERATED FROM PYTHON SOURCE LINES 155-156

You can import a library giving it another name

.. GENERATED FROM PYTHON SOURCE LINES 156-160

.. code-block:: default

    import math as mm  # Built in math library

    print(mm.sqrt(2))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    1.4142135623730951




.. GENERATED FROM PYTHON SOURCE LINES 161-167

Numpy and Matplotlib
~~~~~~~~~~~~~~~~~~~~

Some of the most used Python libraries are: Numpy and Matplotlib.
The first one is for numerical calculations and the second is
for plotting.

.. GENERATED FROM PYTHON SOURCE LINES 167-181

.. code-block:: default


    import numpy as np

    my_array = np.array(
        [1, 2, 3]
    )  # Arrays are a very convenient and powefull data structure.

    print(my_array * 2)  # element wise operations

    print(my_array.T)  # Transpose

    # It doesn't need to be a vector
    my_matrix = np.array([[1, 3, 4], [4, 5, 6]])  # You store arrays of any shape





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [2 4 6]
    [1 2 3]




.. GENERATED FROM PYTHON SOURCE LINES 182-183

You can index elements using square brackets:

.. GENERATED FROM PYTHON SOURCE LINES 183-188

.. code-block:: default

    my_matrix[0, 0]  # 1
    my_matrix[1, 1]  # 5
    my_matrix[0, :]  # [1, 3, 4]
    my_matrix[:, 0]  # [1, 4]





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([1, 4])



.. GENERATED FROM PYTHON SOURCE LINES 189-190

for plotting you can use matplotlib

.. GENERATED FROM PYTHON SOURCE LINES 190-197

.. code-block:: default

    from matplotlib import pyplot as plt

    plt.plot(my_array, my_matrix[1, :], "r")
    plt.title("My plot!")
    plt.show()





.. image-sg:: /tutorials/images/sphx_glr_00-python_001.png
   :alt: My plot!
   :srcset: /tutorials/images/sphx_glr_00-python_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 198-200

You can do multiple lines at once.


.. GENERATED FROM PYTHON SOURCE LINES 200-206

.. code-block:: default

    plt.plot(my_array, my_matrix[0, :], "r", label="My red line")
    plt.plot(my_array, my_matrix[1, :], "b", label="My blue line")
    plt.title("My fancy plot")
    plt.legend()
    plt.show()




.. image-sg:: /tutorials/images/sphx_glr_00-python_002.png
   :alt: My fancy plot
   :srcset: /tutorials/images/sphx_glr_00-python_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 210-218

Plotting a NACA airfoil
~~~~~~~~~~~~~~~~~~~~~~~
*"Those plots looks rather simple plots...."*

Ok, let me show you:

Reference: https://en.wikipedia.org/wiki/NACA_airfoil#Equation_for_a_cambered_4-digit_NACA_airfoil


.. GENERATED FROM PYTHON SOURCE LINES 218-274

.. code-block:: default


    # First let define some helper functions.
    def camber_line(x, m, p, c):
        return np.where(
            (x >= 0) & (x <= (c * p)),
            m * (x / np.power(p, 2)) * (2.0 * p - (x / c)),
            m * ((c - x) / np.power(1 - p, 2)) * (1.0 + (x / c) - 2.0 * p),
        )


    def dyc_over_dx(x, m, p, c):
        return np.where(
            (x >= 0) & (x <= (c * p)),
            ((2.0 * m) / np.power(p, 2)) * (p - x / c),
            ((2.0 * m) / np.power(1 - p, 2)) * (p - x / c),
        )


    def thickness(x, t, c):
        term1 = 0.2969 * (np.sqrt(x / c))
        term2 = -0.1260 * (x / c)
        term3 = -0.3516 * np.power(x / c, 2)
        term4 = 0.2843 * np.power(x / c, 3)
        term5 = -0.1015 * np.power(x / c, 4)
        return 5 * t * c * (term1 + term2 + term3 + term4 + term5)


    def naca4(x, m, p, t, c=1):
        dyc_dx = dyc_over_dx(x, m, p, c)
        th = np.arctan(dyc_dx)
        yt = thickness(x, t, c)
        yc = camber_line(x, m, p, c)
        return (
            (x - yt * np.sin(th), yc + yt * np.cos(th)),
            (x + yt * np.sin(th), yc - yt * np.cos(th)),
        )


    # NACA Parameters
    # naca2412
    m = 0.02
    p = 0.4
    t = 0.12
    c = 1.0

    x = np.linspace(0, 1, 200)
    for item in naca4(x, m, p, t, c):
        plt.plot(item[0], item[1], "b")

    plt.plot(x, camber_line(x, m, p, c), "r")
    plt.axis("equal")
    _ = plt.xlim((-0.05, 1.05))  # Store dummy values as '_'.


    # From: https://stackoverflow.com/questions/31815041/plotting-a-naca-4-series-airfoil




.. image-sg:: /tutorials/images/sphx_glr_00-python_003.png
   :alt: 00 python
   :srcset: /tutorials/images/sphx_glr_00-python_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 275-276

**Cool stuff uh?**

.. GENERATED FROM PYTHON SOURCE LINES 278-289

Brief Python classes concept
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**What is a class?**

A class is an object in a programming language which
.... #TODO: TO BE FILLED.


In Python everything is objects, and hence they have some methods.
For example strings have:

.. GENERATED FROM PYTHON SOURCE LINES 289-292

.. code-block:: default

    mystring.startswith("t")  # True
    mystring.split("e")  # Break the string in a list ["T", "xt"]





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ['t', 'xt']



.. GENERATED FROM PYTHON SOURCE LINES 293-294

You can list the methods of an object using ``dir``:

.. GENERATED FROM PYTHON SOURCE LINES 294-296

.. code-block:: default

    print(dir(mystring))  # yes, '__add__' is a string method!





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']




.. GENERATED FROM PYTHON SOURCE LINES 297-301

You can create your own class and inheritate from them.

PyMAPDL provides you a class which gives you access to all MAPDL
commands and more.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.261 seconds)


.. _sphx_glr_download_tutorials_00-python.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 00-python.py <00-python.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 00-python.ipynb <00-python.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
